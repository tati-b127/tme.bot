import TelegramBot from "node-telegram-bot-api";
import schedule from "node-schedule";
import { Calendar } from "telegram-inline-calendar";
const token = "6344260643:AAEWbRxA-qilqp1GoAfNavHZ0pst08DRgX8";
const bot = new TelegramBot(token, { polling: true });

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á
const tasks = [];
function sendMenu(chatId) {
  const message = `–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ:`;

  const options = {
    reply_markup: {
      keyboard: [
        ["–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞"],
        ["–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"],
        ["–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–∞–º"],
        ["–ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –≤–∞–∂–Ω–æ–º"],
      ],
      one_time_keyboard: true,
    },
  };

  bot.sendMessage(chatId, message, options);
}
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const message = `–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –∫–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫. –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏.`;

  bot.sendMessage(chatId, message);
  sendMenu(chatId);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
bot.on("message", (msg) => {
  const chatId = msg.chat.id;
  const messageText = msg.text;

  if (messageText === "–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞") {
    bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:");
    bot.once("message", (newTaskMsg) => {
      const newTask = {
        task: newTaskMsg.text,
        date: new Date().toLocaleString(),
        done: false,
      };
      tasks.push(newTask);
      bot.sendMessage(chatId, `–ó–∞–¥–∞—á–∞ "${newTask.task}" –¥–æ–±–∞–≤–ª–µ–Ω–∞.`);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–Ω—é –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
      sendMenu(chatId);
    });
  } else if (messageText === "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á") {
    if (tasks.length === 0) {
      bot.sendMessage(chatId, "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.");
      sendMenu(chatId);
    } else {
      const opt = {
        reply_markup: {
          inline_keyboard: tasks.map((task, index) => [
            {
              text: `${index + 1}. ${task.task} ${task.done ? "‚úÖ" : "üïó"}`,
              callback_data: index.toString(),
            },
            { text: "üóëÔ∏è", callback_data: `delete:${index}` },
          ]),
        },
      };

      bot.sendMessage(chatId, "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:", opt);
      sendMenu(chatId);
    }
  } else if (messageText === "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–∞–º") {
    if (tasks.length === 0) {
      bot.sendMessage(chatId, "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.");
      sendMenu(chatId);
    } else {
      const sortedTasks = [...tasks].sort(
        (a, b) => new Date(a.date) - new Date(b.date)
      );

      const opt = {
        reply_markup: {
          inline_keyboard: sortedTasks.map((task, index) => [
            {
              text: `${index + 1}. ${task.task} ${task.done ? "‚úÖ" : "üïó"}`,
              callback_data: index.toString(),
            },
            { text: "üóëÔ∏è", callback_data: `delete:${index}` },
          ]),
        },
      };

      bot.sendMessage(chatId, "–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:", opt);
      sendMenu(chatId);
      //   const message = `–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ:`;

      //   const options = {
      //     reply_markup: {
      //       keyboard: [
      //         ["–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞"],
      //         ["–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"],
      //         ["–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–∞–º"],
      //       ],
      //       one_time_keyboard: true,
      //     },
      //   };
      //   bot.sendMessage(chatId, message, options);
    }
  } else if (messageText === "–ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –≤–∞–∂–Ω–æ–º") {
    bot
      .sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –æ —á–µ–º –≤–∞–º –Ω—É–∂–Ω–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å:")
      .then(() => {
        bot.once("message", (reminderTextMsg) => {
          const reminder = {
            text: reminderTextMsg.text,
            date: "",
            remindBefore: 0,
          };

          const calendar = new Calendar(bot, {
            date_format: "DD-MM-YYYY, hh:mm A",
            language: "en",
            start_week_day: 1,
            time_selector_mod: true,
            time_range: "07:00-23:59",
            time_step: "60m",
          });

          bot
            .sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
            .then(() => {
              calendar.startNavCalendar(msg);
            })
            .catch((error) => {
              console.error("Error sending message:", error);
            });

          bot.on("callback_query", (query) => {
            if (
              query.message.message_id ==
              calendar.chats.get(query.message.chat.id)
            ) {
              const res = calendar.clickButtonCalendar(query);
              if (res !== -1) {
                bot.sendMessage(chatId, "–í—ã –≤—ã–±—Ä–∞–ª–∏: " + res);
                console.log(res);
                reminder.date = res;
                const remindOptions = {
                  reply_markup: {
                    inline_keyboard: [
                      [
                        { text: "5 –º–∏–Ω—É—Ç", callback_data: "remind:5" },
                        { text: "10 –º–∏–Ω—É—Ç", callback_data: "remind:10" },
                        { text: "30 –º–∏–Ω—É—Ç", callback_data: "remind:30" },
                        { text: "1 —á–∞—Å", callback_data: "remind:60" },
                      ],
                    ],
                  },
                };

                bot
                  .sendMessage(
                    chatId,
                    "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –º–Ω–µ –≤–∞—Å –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å:",
                    remindOptions
                  )
                  .catch((error) => {
                    console.error("Error in awaitDate:", error);
                  });
              }
            }
          });

          bot.on("callback_query", (query) => {
            const remindTime = parseInt(query.data.split(":")[1]);
            if (!isNaN(remindTime)) {
              reminder.remindBefore = remindTime;

              const reminderMessage = `–Ø –≤–∞—Å –æ–ø–æ–≤–µ—â—É –ø–æ –≤–∞—à–µ–º—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—é "${reminder.text}" –∑–∞ ${remindTime} –º–∏–Ω—É—Ç, ${reminder.date}`;
              bot.sendMessage(chatId, reminderMessage, {
                reply_markup: {
                  inline_keyboard: [
                    [
                      {
                        text: "–°–ø–∞—Å–∏–±–æ",
                        callback_data: "thank_you",
                      },
                    ],
                  ],
                },
              });
              console.log(reminder.date);
              const remindDate = new Date(
                new Date(reminder.date) - remindTime * 60000
              );

              schedule.scheduleJob(remindDate, () => {
                bot.sendMessage(chatId, `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: "${reminder.text}"`);
              });
            }
          });
        });
      })
      .catch((error) => {
        console.error("Error sending message:", error);
      });
  }
});
bot.on("callback_query", (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;

  if (data.startsWith("delete:")) {
    const indexToDelete = parseInt(data.split(":")[1]);
    if (indexToDelete >= 0 && indexToDelete < tasks.length) {
      tasks.splice(indexToDelete, 1);
      bot.editMessageText("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.", {
        chat_id: chatId,
        message_id: query.message.message_id,
      });
    }
  } else {
    const taskIndex = parseInt(data);
    if (taskIndex >= 0 && taskIndex < tasks.length) {
      tasks[taskIndex].done = !tasks[taskIndex].done;
      const newText = `${taskIndex + 1}. ${tasks[taskIndex].task} ${
        tasks[taskIndex].done ? "‚úÖ" : "üïó"
      }`;
      bot.editMessageText(newText, {
        chat_id: chatId,
        message_id: query.message.message_id,
        reply_markup: {
          inline_keyboard: tasks.map((task, index) => [
            {
              text: `${index + 1}. ${task.task} ${task.done ? "‚úÖ" : "üïó"}`,
              callback_data: index.toString(),
            },
            { text: "üóëÔ∏è", callback_data: `delete:${index}` },
          ]),
        },
      });
    }
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.on("polling_error", (error) => {
  console.error(error);
});
console.error("–Ø —Ç—É—Ç!");
